@{
    ViewData["Title"] = "Grant Applications - Second Harvest Northland Grants Management System";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/css/style.css">
</head>
<body>

    <header>
        <h1>Grant Applications</h1>
        <nav>
            <ul>
                <li><a href="@Url.Action("Index", "Dashboard")">Dashboard</a></li>
                <li><a href="@Url.Action("GrantReview", "Grants")">Grant Review</a></li>
                <li><a href="@Url.Action("GrantManagement", "Grants")">Grant Management</a></li>
            </ul>
        </nav>
    </header>

    <main>
        <section id="submit-application">
            <h2>Submit a New Application</h2>
            <form id="application-form" method="post" enctype="multipart/form-data" asp-action="SubmitApplication" asp-controller="Grants">
                <div class="form-group">
                    <label for="title">Grant Title:</label>
                    <input type="text" id="title" name="Title" required>
                    <div class="error-message" id="title-error"></div>
                </div>
                <div class="form-group">
                    <label for="applicant">Applicant Name:</label>
                    <input type="text" id="applicant" name="ApplicantName" required>
                    <div class="error-message" id="applicant-error"></div>
                </div>
                <div class="form-group">
                    <label for="organization">Funder:</label>
                    <input type="text" id="organization" name="Organization" required>
                    <div class="error-message" id="organization-error"></div>
                </div>
                <div class="form-group">
                    <label for="amount">Funding Amount Requested:</label>
                    <input type="number" id="amount" name="FundingRequested" required>
                    <div class="error-message" id="amount-error"></div>
                </div>
                <div class="form-group">
                    <label for="description">Project Description:</label>
                    <textarea id="description" name="ProjectDescription" rows="5" required></textarea>
                    <div class="error-message" id="description-error"></div>
                </div>
                <div class="form-group">
                    <label for="timeline">Project Timeline:</label>
                    <input type="date" id="timeline" name="Timeline" required>
                    <div class="error-message" id="timeline-error"></div>
                </div>
                <div class="form-group">
                    <label for="documents">Attach Documents:</label>
                    <input type="file" id="documents" name="Documents" multiple>
                    <div class="file-preview" id="file-preview"></div>
                </div>
                <button type="submit">Submit Application</button>
                <div id="form-feedback" class="feedback-message"></div>
            </form>
        </section>

        <section id="application-status">
            <h2>Your Applications</h2>
            <table>
                <thead>
                    <tr>
                        <th>Grant Title</th>
                        <th>Status</th>
                        <th>Submitted On</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var application in Model.Applications)
                    {
                        <tr>
                            <td>@application.Title</td>
                            <td>@application.Status</td>
                            <td>@application.DateSubmitted.ToString("MM/dd/yyyy")</td>
                            <td><a href="@Url.Action("ViewDetails", "Grants", new { id = application.Id })">View Details</a></td>
                        </tr>
                    }
                </tbody>
            </table>
        </section>
    </main>

    <footer>
        <p>&copy; 2024 Second Harvest Northland</p>
    </footer>

    <script>
        document.getElementById('application-form').addEventListener('submit', async function(event) {
            event.preventDefault(); // Prevent the default form submission

            // Clear previous error messages
            clearErrorMessages();

            // Validate input fields
            const title = document.getElementById('title').value;
            const applicantName = document.getElementById('applicant').value;
            const organization = document.getElementById('organization').value;
            const fundingRequested = parseFloat(document.getElementById('amount').value);
            const projectDescription = document.getElementById('description').value;
            const timeline = document.getElementById('timeline').value;

            let valid = true;

            // Validate each field
            if (!title) {
                showErrorMessage('title', 'Grant title is required.');
                valid = false;
            }

            if (!applicantName) {
                showErrorMessage('applicant', 'Applicant name is required.');
                valid = false;
            }

            if (!organization) {
                showErrorMessage('organization', 'Organization name is required.');
                valid = false;
            }

            if (isNaN(fundingRequested) || fundingRequested <= 0) {
                showErrorMessage('amount', 'Please enter a valid funding amount greater than zero.');
                valid = false;
            }

            if (!projectDescription) {
                showErrorMessage('description', 'Project description is required.');
                valid = false;
            }

            if (!timeline) {
                showErrorMessage('timeline', 'Project timeline is required.');
                valid = false;
            }

            if (!valid) {
                return;
            }

            const formData = new FormData();
            formData.append('title', title);
            formData.append('applicantName', applicantName);
            formData.append('organization', organization);
            formData.append('fundingRequested', fundingRequested);
            formData.append('projectDescription', projectDescription);
            formData.append('timeline', timeline);
            const files = document.getElementById('documents').files;
            for (let i = 0; i < files.length; i++) {
                formData.append('documents', files[i]);
            }

            try {
                const response = await fetch('@Url.Action("SubmitApplication", "Grants")', {
                    method: 'POST',
                    body: formData // Send form data directly
                });

                if (response.ok) {
                    const jsonResponse = await response.json();
                    console.log('Application submitted successfully:', jsonResponse);
                    showSuccessMessage('Application submitted successfully!');
                    document.getElementById('application-form').reset();
                    fetchApplications(); // Refresh the applications table
                } else {
                    console.error('Error submitting application:', response.statusText);
                    showErrorMessage('form', 'Error submitting application. Please try again.');
                }
            } catch (error) {
                console.error('Network error:', error);
                showErrorMessage('form', 'Network error. Please check your connection.');
            }
        });

        function showErrorMessage(fieldId, message) {
            const errorElement = document.getElementById(`${fieldId}-error`);
            errorElement.textContent = message;
        }

        function clearErrorMessages() {
            const errorElements = document.querySelectorAll('.error-message');
            errorElements.forEach((errorElement) => {
                errorElement.textContent = '';
            });
        }

        function showSuccessMessage(message) {
            const feedbackElement = document.getElementById('form-feedback');
            feedbackElement.textContent = message;
            feedbackElement.classList.add('success');
        }

        // Preview uploaded files
        document.getElementById('documents').addEventListener('change', function() {
            const previewContainer = document.getElementById('file-preview');
            previewContainer.innerHTML = ''; // Clear previous preview
            const files = this.files;
            for (let i = 0; i < files.length; i++) {
                const fileItem = document.createElement('div');
                fileItem.textContent = files[i].name;
                previewContainer.appendChild(fileItem);
            }
        });
    </script>

</body>
</html>
